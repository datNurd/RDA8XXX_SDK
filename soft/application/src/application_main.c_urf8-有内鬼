/*
 * @File  app_main.c
 * @Brief An example of SDK's mini system
 * 
 * @Author: Neucrack 
 * @Date: 2017-11-11 16:45:17 
 * @Last Modified by: Neucrack
 * @Last Modified time: 2017-11-11 18:24:56
 */

#include "stdio.h"
#include "stdint.h"
#include "stdbool.h"
#include "cos.h"
#include "event.h"
#include "dm.h"
#include "sxs_io.h"
#include "csw.h"
//#include "mci_lcd.h"
#include "hal_gpio.h"
#include "lcdd_m.h"
#include "imgs_m.h"
//#include "pics.h"
#include "lvgl.h"
//#include "imgsp_jpeg_dec.h"

#define AppMain_TASK_STACK_SIZE    (1024*8)
#define AppMain_TASK_PRIORITY      (COS_MMI_TASKS_PRIORITY_BASE + 1) //220-250 is assigned to MMI part.
#define MMI_FLASHTASK_PRIORITY     (COS_MMI_TASKS_PRIORITY_BASE + 10)
HANDLE otherTaskHandle = NULL;
HANDLE mainTaskHandle  = NULL;

#define LV_HOR_RES_MAX (128)
#define LV_VER_RES_MAX (128)
#define MY_DISP_HOR_RES (128)
#define MY_DISP_VER_RES (64)


/**********************
 *  STATIC PROTOTYPES
 **********************/
static lv_disp_draw_buf_t disp_buf;
static lv_color_t* buf1;                     /*Declare a buffer for 1/10 screen size*/
static lv_color_t* buf2;                     /*Declare a buffer for 1/10 screen size*/

static void my_disp_flush(lv_disp_drv_t * disp, const lv_area_t * area, lv_color_t * color_p);
static bool my_touchpad_read(struct _lv_indev_drv_t * indev_drv, lv_indev_data_t * data);


#ifdef __VDS_QUICK_FLUSH__
extern VOID VDS_CacheTaskEntry(void *pData);
UINT32 g_htstVdsTask = 0;
#endif

BOOL _GetACLBStatus()
{
    return FALSE;
}

void MMIDisplayWaitingAnimation(void)
{
    return;
}
VOID SRVAPI BAL_InitSysFreq(VOID)
{
    ; // do nothing
}
extern MMI_Default_Value g_MMI_Default_Value;
VOID BAL_SetMMIDefaultValue(VOID)
{
    g_MMI_Default_Value.nMinVol = 3200;
    g_MMI_Default_Value.nMemorySize = 500 * 1024;
}

void Trace(UINT16 nIndex, PCSTR fmt, ...)
{
    char uart_buf[256];
    va_list ap;
    va_start (ap, fmt);
    vsnprintf(uart_buf, sizeof(uart_buf), fmt, ap);
    va_end (ap);
    if (nIndex == 0x00)
    {
        // Forced trace
        SXS_TRACE(_MMI | TNB_ARG(0) | TSTDOUT, uart_buf);
    }
    else
    {
        // Regular trace
        SXS_TRACE(_MMI | TNB_ARG(0) | TLEVEL(nIndex), uart_buf);
    }
}

void lv_log_print(const char *buf)
{
	Trace(1,"LVGL: %s ", buf);
}
void lvgl_task_tick()
{
    lv_tick_inc(1);
    COS_StartCallbackTimer(mainTaskHandle,1,lvgl_task_tick,NULL);
}

void Init_LVGL()
{
    lv_init();
    
    static lv_disp_draw_buf_t draw_buf_dsc_1;
    static lv_color_t buf_1[MY_DISP_HOR_RES * MY_DISP_VER_RES];                          /*A buffer for 10 rows*/
    lv_disp_draw_buf_init(&draw_buf_dsc_1, buf_1, NULL, MY_DISP_HOR_RES * MY_DISP_VER_RES);   /*Initialize the display buffer*/
    Trace(3,"buf_1:%x ", buf_1);
    lv_log_register_print_cb(lv_log_print);
   static lv_disp_drv_t disp_drv;               /*Descriptor of a display driver*/
   lv_disp_drv_init(&disp_drv);          /*Basic initialization*/
   disp_drv.hor_res = MY_DISP_HOR_RES;
   disp_drv.ver_res = MY_DISP_HOR_RES;
   disp_drv.flush_cb = my_disp_flush;    /*Set your driver function*/
   disp_drv.draw_buf = &draw_buf_dsc_1;          /*Assign the buffer to the display*/
   lv_disp_drv_register(&disp_drv);      /*Finally register the driver*/
    
   //COS_StartCallbackTimer(mainTaskHandle,1,lvgl_task_tick,NULL);
    
    //buf1  = (lv_color_t*)COS_Malloc(LV_HOR_RES_MAX*20*sizeof(lv_color_t), COS_MMI_HEAP);
    //buf2  = (lv_color_t*)COS_Malloc(LV_HOR_RES_MAX*20*sizeof(lv_color_t), COS_MMI_HEAP);
    //Trace(3,"buf1:%x , buf2:%x", buf1, buf2);
    //lv_disp_draw_buf_init(&disp_buf, buf1, NULL, LV_HOR_RES_MAX * LV_VER_RES_MAX);    /*Initialize the display buffer*/



    /*************************
     * Input device interface
     *************************/
    /*Add a touchpad in the example*/
   //lv_indev_drv_t indev_drv;                  /*Descriptor of a input device driver*/
   //lv_indev_drv_init(&indev_drv);             /*Basic initialization*/
   //indev_drv.type = LV_INDEV_TYPE_POINTER;    /*Touch pad is a pointer-like device*/
   //indev_drv.read_cb = my_touchpad_read;      /*Set your driver function*/
   //lv_indev_drv_register(&indev_drv);         /*Finally register the driver*/
}
void Init_lcd()
{
    LCDD_SCREEN_INFO_T lcdScreenInfo;
    UINT32 background = 0xffff;
    lcdd_Open();
    lcdd_GetScreenInfo(&lcdScreenInfo);
    lcdd_SetStandbyMode(FALSE);
    lcdd_SetBrightness(7);
    
    LCDD_ROI_T roi;
    roi.x = 0;
    roi.y = 0;
    roi.width = lcdScreenInfo.width;
    roi.height = lcdScreenInfo.height;
    lcdd_FillRect16(&roi, background);
}

LV_FONT_DECLARE(pangmenzhengdao_font);
void lvgl_text_show()
{
    static lv_style_t font_style;
    lv_style_init(&font_style);
    //设置样式字体
    lv_style_set_text_font(&font_style, &pangmenzhengdao_font);
    
    lv_obj_t* bgk = lv_obj_create(lv_scr_act());//创建对象
    lv_obj_set_style_bg_opa(bgk, LV_OPA_100, LV_PART_MAIN);//设置颜色覆盖度100%，数值越低，颜色越透。
    lv_obj_set_style_bg_color(bgk, lv_color_hex(0x8A8E39), LV_PART_MAIN);//设置背景颜色为墨绿色
    //默认是从0,0处开始绘制
    lv_obj_set_size(bgk, MY_DISP_HOR_RES, MY_DISP_HOR_RES);//设置覆盖大小

    /*Create a Label on the currently active screen*/
    lv_obj_t * labelText =  lv_label_create(lv_scr_act());
    //应用样式
    lv_obj_add_style(labelText,&font_style,LV_PART_MAIN);
    lv_obj_set_style_bg_color(labelText, lv_color_hex(0x8A8E39), LV_PART_MAIN);
    lv_label_set_text(labelText, "有内鬼终止交易！");
    //lv_obj_set_size(labelText,100,20);
    /* Align the Label to the center
     * 0, 0 at the end means an x, y offset after alignment*/
    lv_obj_align(labelText, LV_ALIGN_CENTER, 0, 0);
    
    
    /*Create a Label on the currently active screen*/
    lv_obj_t * labelHome =  lv_label_create(lv_scr_act());
    /*Modify the Label's text*/
    lv_label_set_text(labelHome,LV_SYMBOL_HOME);
    lv_obj_set_pos(labelHome,10,10);
    lv_obj_set_size(labelHome,20,20);
    
    /*Create a Label on the currently active screen*/
    lv_obj_t * labelWIFI =  lv_label_create(lv_scr_act());
    lv_label_set_text(labelWIFI,LV_SYMBOL_WIFI" "LV_SYMBOL_BATTERY_1);
    lv_obj_set_pos(labelWIFI,75,10);
    lv_obj_set_size(labelWIFI,40,20);
    
    /*Create a Label on the currently active screen*/
    lv_obj_t * labelCancle =  lv_label_create(lv_scr_act());
    lv_obj_add_style(labelCancle,&font_style,LV_PART_MAIN);
    lv_obj_set_style_bg_color(labelText, lv_color_hex(0x8A8E39), LV_PART_MAIN);
    lv_label_set_text(labelCancle,"取消");
    lv_obj_set_pos(labelCancle,10,100);
    //lv_obj_set_size(labelCancle,40,15);
    
    /*Create a Label on the currently active screen*/
    lv_obj_t * labelOK =  lv_label_create(lv_scr_act());
    lv_obj_add_style(labelOK,&font_style,LV_PART_MAIN);
    lv_obj_set_style_bg_color(labelText, lv_color_hex(0x8A8E39), LV_PART_MAIN);
    lv_label_set_text(labelOK,"确定");
    lv_obj_set_pos(labelOK,80,100);
    //lv_obj_set_size(labelOK,40,15);
}

/**
 * Crate some objects an animate them
 */
//void lv_tutorial_animations(void)
//{
//    lv_obj_t * label;
//
//
//    /*Create a button the demonstrate built-in animations*/
//    lv_obj_t * btn1;
//    btn1 = lv_btn_create(lv_scr_act(), NULL);
//    lv_obj_set_pos(btn1, 10, 10);       /*Set a position. It will be the animation's destination*/
//    lv_obj_set_size(btn1, 80, 30);
//
//    label = lv_label_create(btn1, NULL);
//    lv_label_set_text(label, "Float");
//
//    /* Float in the button using a built-in function
//     * Delay the animation with 2000 ms and float in 300 ms. NULL means no end callback*/
//    lv_obj_animate(btn1, LV_ANIM_FLOAT_TOP | LV_ANIM_IN, 300, 2000, NULL);
//
//    /*Create a button to demonstrate user defined animations*/
//    lv_obj_t * btn2;
//    btn2 = lv_btn_create(lv_scr_act(), NULL);
//    lv_obj_set_pos(btn2, 10, 50);       /*Set a position. It will be the animation's destination*/
//    lv_obj_set_size(btn2, 60, 30);
//
//    label = lv_label_create(btn2, NULL);
//    lv_label_set_text(label, "Move");
//
//    /*Create an animation to move the button continuously left to right*/
//    lv_anim_t a;
//    a.var = btn2;
//    a.start = lv_obj_get_x(btn2);
//    a.end = a.start + (40);
//    a.fp = (lv_anim_fp_t)lv_obj_set_x;
//    a.path = lv_anim_path_linear;
//    a.end_cb = NULL;
//    a.act_time = -1000;                         /*Negative number to set a delay*/
//    a.time = 400;                               /*Animate in 400 ms*/
//    a.playback = 1;                             /*Make the animation backward too when it's ready*/
//    a.playback_pause = 0;                       /*Wait before playback*/
//    a.repeat = 1;                               /*Repeat the animation*/
//    a.repeat_pause = 500;                       /*Wait before repeat*/
//    lv_anim_create(&a);
//
//    /*Create a button to demonstrate the style animations*/
//    lv_obj_t * btn3;
//    btn3 = lv_btn_create(lv_scr_act(), NULL);
//    lv_obj_set_pos(btn3, 10, 90);       /*Set a position. It will be the animation's destination*/
//    lv_obj_set_size(btn3, 80, 30);
//
//    label = lv_label_create(btn3, NULL);
//    lv_label_set_text(label, "Style");
//
//	lv_style_t btn3_style;
//    /*Create a unique style for the button*/
//    lv_style_copy(&btn3_style, lv_btn_get_style(btn3, LV_BTN_STYLE_REL));
//    lv_btn_set_style(btn3, LV_BTN_STATE_REL, &btn3_style);
//
//    /*Animate the new style*/
//    lv_style_anim_t sa;
//    sa.style_anim = &btn3_style;            /*This style will be animated*/
//    sa.style_start = &lv_style_btn_rel;     /*Style in the beginning (can be 'style_anim' as well)*/
//    sa.style_end = &lv_style_pretty;        /*Style at the and (can be 'style_anim' as well)*/
//    sa.act_time = -500;                     /*These parameters are the same as with the normal animation*/
//    sa.time = 1000;
//    sa.playback = 1;
//    sa.playback_pause = 500;
//    sa.repeat = 1;
//    sa.repeat_pause = 500;
//    sa.end_cb = NULL;
//    lv_style_anim_create(&sa);
//}

bool lvgl_init_flag = false;
void LVGL_Task(void* param)
{
//	    uint32_t i = 0;
//	while(1) 
//	{
//		COS_Sleep(100);
//		i++;
//		
//		Trace(3,"LVGL_Task: wait debug");
//		if(i > 200)
//			break;
//	}
    Init_lcd();
    Init_LVGL();
    lvgl_init_flag = true;
    Trace(1,"init complete");
    /*************************************
     * Run the task handler of LittlevGL
     *************************************/
    while(1) {
        /* Periodically call this function.
         * The timing is not critical but should be between 1..10 ms */
        //Trace(3,"1");
        lv_tick_inc(10);
        lv_task_handler();
        COS_Sleep(10);
        //Trace(3,"2");
    }
}
void Display_Task(void* param)
{
    Trace(3,"start Display_Task");
    while(!lvgl_init_flag)
    {
    	 Trace(3,"Display_Task: wait lvgl init");
        COS_Sleep(200);
    }
    Trace(3,"start display");
    //lv_example_led_1();
    lvgl_text_show();
    //lv_tutorial_animations();

    while(1)
    {
        Trace(3,"in display task");
        COS_Sleep(200);
    }
}

#define APP_ZERO_PARAM1(pEv)      \
    do {                         \
        (pEv)->nParam1 = 0;      \
    } while (0)

void ProcPowerOnInd(COS_EVENT *pEvent)
{
    switch (LOUINT16(pEvent->nParam1))
    {
    case DM_POWRN_ON_CAUSE_KEY:   // power on by press power key
    case DM_POWRN_ON_CAUSE_RESET: // reset
        break;
    case DM_POWRN_ON_CAUSE_CHARGE: // power on by charging
    case DM_POWRN_ON_CAUSE_ALARM:  // power on by alarming
    case DM_POWRN_ON_CAUSE_EXCEPTION:
    default:
        break;
    }
    APP_ZERO_PARAM1(pEvent);
}

void EventDispatch(COS_EVENT *pev)
{
    Trace(1, "EventDispatch get event: 0x%08x/0x%08x/0x%08x/0x%08x",
           pev->nEventId, pev->nParam1, pev->nParam2, pev->nParam3);
    
    switch (pev->nEventId)
    {
    case EV_DM_POWER_ON_IND:
        ProcPowerOnInd(pev);
        break;
    case EV_TIMER:
        break;
    default:
        break;
    }
}

void BAL_MmiTask(VOID *pData)
{
    Trace(1,"AppMainTask Test");
    COS_EVENT event = {0};
    
    otherTaskHandle = COS_CreateTask(LVGL_Task,
                               NULL,
                               NULL,
                               AppMain_TASK_STACK_SIZE,
                               AppMain_TASK_PRIORITY+1,
                               COS_CREATE_DEFAULT,
                               0,
                               "lvgl Task");
    
        otherTaskHandle = COS_CreateTask(Display_Task,
                               NULL,
                               NULL,
                               AppMain_TASK_STACK_SIZE,
                               AppMain_TASK_PRIORITY+2,
                               COS_CREATE_DEFAULT,
                               0,
                               "display Task");
    
   for (;;)
    {
        if (event.nParam1 != NULL)
        {
            if (COS_Free((VOID *)event.nParam1) == FALSE)
            {
                APP_ZERO_PARAM1(&event);
            }
        }
        
        COS_WaitEvent(mainTaskHandle, &event, COS_WAIT_FOREVER);
        
        EventDispatch(&event);
    }
}

BOOL SRVAPI BAL_ApplicationInit(VOID)
{
    Trace(1,"app_task_init Test");
    application_RegisterYourself();
    
    // Create a default MMI task by CSW automatically.
    // You only can change the task stack size.
    mainTaskHandle = COS_CreateTask(BAL_MmiTask,
                               NULL,
                               NULL,
                               AppMain_TASK_STACK_SIZE,
                               AppMain_TASK_PRIORITY,
                               COS_CREATE_DEFAULT,
                               0,
                               "APP Task");
    
    #ifdef __VDS_QUICK_FLUSH__
    g_htstVdsTask = COS_CreateTask(VDS_CacheTaskEntry,
                               NULL, NULL,
                               1024,
                               MMI_FLASHTASK_PRIORITY,
                               COS_CREATE_DEFAULT,
                               0,
                               "APP VDS Flush Task");
#endif
}

//static uint16_t* flush_pixels = NULL;
//static uint16_t flush_pixels[LV_HOR_RES_MAX * LV_VER_RES_MAX / 10 + 8];                     /*Declare a buffer for 1/10 screen size*/
void my_disp_flush(lv_disp_drv_t * disp, const lv_area_t * area, lv_color_t * color_p)
{
//    if(NULL == flush_pixels)
//    {
//       flush_pixels = (uint16_t*)COS_Malloc(LV_HOR_RES_MAX*20*sizeof(uint16_t), COS_MMI_HEAP);
//    }
//    
    static uint16_t flush_pixels[MY_DISP_HOR_RES * MY_DISP_VER_RES];
    
    uint32_t i = 0;
    int32_t x, y;
    for(y = area->y1; y <= area->y2; y++) {
        for(x = area->x1; x <= area->x2; x++) {
            flush_pixels[i++] = color_p->full;  /* Put a pixel to the display.*/
            color_p++;
        }
    }
    
    //flush to LCD
    LCDD_FBW_T window;
    window.fb.buffer = flush_pixels;
    //window.fb.buffer = (uint16_t*)color_p;
    window.fb.width = area->x2 - area->x1 + 1;
    window.fb.height = area->y2 - area->y1 + 1;
    window.fb.colorFormat = LCDD_COLOR_FORMAT_RGB_565;
    window.roi.x = 0;
    window.roi.y = 0;
    window.roi.width = window.fb.width;
    window.roi.height = window.fb.height;
    
    lcdd_Blit16(&window,area->x1,area->y1);

    lv_disp_flush_ready(disp);         /* Indicate you are ready with the flushing*/
}

bool my_touchpad_read(struct _lv_indev_drv_t * indev_drv, lv_indev_data_t * data)
{
    //data->state = touchpad_is_pressed() ? LV_INDEV_STATE_PR : LV_INDEV_STATE_REL;
    //if(data->state == LV_INDEV_STATE_PR) touchpad_get_xy(&data->point.x, &data->point.y);

    return false; /*Return `false` because we are not buffering and no more data to read*/
}
